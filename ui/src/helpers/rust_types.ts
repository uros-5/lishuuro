/*
 Generated by typeshare 1.13.2
*/

export enum MessageType {
	ChangeRoom,
	AddGameRequest,
	RedirectToGame,
	PlayerCount,
	GameCount,
	StartClock,
	GetGame,
	GetConfirmed,
	GetHistory,
	GetHand,
	SelectMove,
	PlacePiece,
	MovePiece,
	Draw,
	Resign,
	GameEnd,
	GetTv,
	AddTvGame,
	NewTvMove,
	RemoveTVGame,
	SaveState,
	ReloadJinja,
	ConfirmSelection,
	NewPlayer,
}

export interface RedirectToPlacement {
	t: MessageType;
	id: string;
	last_clock: string;
	players: [string, string];
	sfen: string;
	variant: number;
}

export interface AllGames {
	t: MessageType;
	games: RedirectToPlacement[];
}

export interface ConfirmSelection {
	t: MessageType;
	confirmed: [boolean, boolean];
}

export interface GameDraw {
	t: MessageType;
	draw_offer: boolean;
	end: number;
}

export interface GameEnd {
	t: MessageType;
	result: number;
	status: number;
}

export type TypeOfGame = 
	| { type: "VsFriend", content: string }
	| { type: "VsAi", content: number };

export interface GameRequest {
	minutes: number;
	incr: number;
	variant: number;
	sub_variant?: number;
	color: number;
	game_type: TypeOfGame;
}

export interface GamesCount {
	t: MessageType;
	count: number;
}

export interface MovePiece {
	t: MessageType;
	clocks: [number, number];
	status: number;
	result: number;
	game_move: string;
}

export interface NewTvGame {
	t: MessageType;
	game: RedirectToPlacement;
}

export interface NewTvMove {
	t: MessageType;
	game: string;
	game_move: string;
}

export interface PlacePiece {
	t: MessageType;
	clocks: [number, number];
	first_move_error: boolean;
	next_stage: boolean;
	sfen: string;
}

/** Representing one player */
export interface Player {
	_id: string;
	reg: boolean;
	created_at: string;
}

export interface PlayerSelection {
	t: MessageType;
	hand: string;
}

export interface PlayersCount {
	count: number;
	t: MessageType;
}

export interface RedirectPlayer {
	t: MessageType;
	game: string;
}

export interface RemoveTvGame {
	t: MessageType;
	game: string;
}

export interface TimeControl {
	last_click: string;
	clocks: [number, number];
}

export interface ShuuroGame {
	_id: string;
	min: number;
	incr: number;
	players: [string, string];
	side_to_move: number;
	clocks: [number, number];
	last_clock: string;
	current_stage: number;
	result: number;
	status: number;
	variant: number;
	credits: [number, number];
	hands: [string, string];
	sfen: string;
	history: [string[], string[], string[]];
	game_start: string;
	placement_start: string;
	tc: TimeControl;
	sub_variant?: number;
}

export interface StartClock {
	t: MessageType;
	players: [string, string];
	click: string;
}

export interface UserProfileGames {
	player?: Player;
	games?: ShuuroGame[];
}

